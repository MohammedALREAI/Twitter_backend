type AggregateComment {
  count: Int!
}

type AggregateFile {
  count: Int!
}

type AggregateLike {
  count: Int!
}

type AggregateRetweet {
  count: Int!
}

type AggregateTag {
  count: Int!
}

type AggregateTweet {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Comment {
  id: ID!
  text: String!
  tweet: Tweet
  user: User
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CommentConnection {
  pageInfo: PageInfo!
  edges: [CommentEdge]!
  aggregate: AggregateComment!
}

input CommentCreateInput {
  id: ID
  text: String!
  tweet: TweetCreateOneWithoutCommentsInput
  user: UserCreateOneWithoutCommentsInput
}

input CommentCreateManyWithoutTweetInput {
  create: [CommentCreateWithoutTweetInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateManyWithoutUserInput {
  create: [CommentCreateWithoutUserInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateWithoutTweetInput {
  id: ID
  text: String!
  user: UserCreateOneWithoutCommentsInput
}

input CommentCreateWithoutUserInput {
  id: ID
  text: String!
  tweet: TweetCreateOneWithoutCommentsInput
}

type CommentEdge {
  node: Comment!
  cursor: String!
}

enum CommentOrderByInput {
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CommentPreviousValues {
  id: ID!
  text: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input CommentScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [CommentScalarWhereInput!]
  OR: [CommentScalarWhereInput!]
  NOT: [CommentScalarWhereInput!]
}

type CommentSubscriptionPayload {
  mutation: MutationType!
  node: Comment
  updatedFields: [String!]
  previousValues: CommentPreviousValues
}

input CommentSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CommentWhereInput
  AND: [CommentSubscriptionWhereInput!]
  OR: [CommentSubscriptionWhereInput!]
  NOT: [CommentSubscriptionWhereInput!]
}

input CommentUpdateInput {
  text: String
  tweet: TweetUpdateOneWithoutCommentsInput
  user: UserUpdateOneWithoutCommentsInput
}

input CommentUpdateManyDataInput {
  text: String
}

input CommentUpdateManyMutationInput {
  text: String
}

input CommentUpdateManyWithoutTweetInput {
  create: [CommentCreateWithoutTweetInput!]
  delete: [CommentWhereUniqueInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutTweetInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutTweetInput!]
  deleteMany: [CommentScalarWhereInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
}

input CommentUpdateManyWithoutUserInput {
  create: [CommentCreateWithoutUserInput!]
  delete: [CommentWhereUniqueInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [CommentScalarWhereInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
}

input CommentUpdateManyWithWhereNestedInput {
  where: CommentScalarWhereInput!
  data: CommentUpdateManyDataInput!
}

input CommentUpdateWithoutTweetDataInput {
  text: String
  user: UserUpdateOneWithoutCommentsInput
}

input CommentUpdateWithoutUserDataInput {
  text: String
  tweet: TweetUpdateOneWithoutCommentsInput
}

input CommentUpdateWithWhereUniqueWithoutTweetInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutTweetDataInput!
}

input CommentUpdateWithWhereUniqueWithoutUserInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutUserDataInput!
}

input CommentUpsertWithWhereUniqueWithoutTweetInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutTweetDataInput!
  create: CommentCreateWithoutTweetInput!
}

input CommentUpsertWithWhereUniqueWithoutUserInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutUserDataInput!
  create: CommentCreateWithoutUserInput!
}

input CommentWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  tweet: TweetWhereInput
  user: UserWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
}

input CommentWhereUniqueInput {
  id: ID
}

scalar DateTime

type File {
  id: ID!
  url: String!
  tweet: Tweet
  user: User
  createdAt: DateTime!
  updatedAt: DateTime!
}

type FileConnection {
  pageInfo: PageInfo!
  edges: [FileEdge]!
  aggregate: AggregateFile!
}

input FileCreateInput {
  id: ID
  url: String!
  tweet: TweetCreateOneWithoutFilesInput
  user: UserCreateOneWithoutFilesInput
}

input FileCreateManyWithoutTweetInput {
  create: [FileCreateWithoutTweetInput!]
  connect: [FileWhereUniqueInput!]
}

input FileCreateManyWithoutUserInput {
  create: [FileCreateWithoutUserInput!]
  connect: [FileWhereUniqueInput!]
}

input FileCreateWithoutTweetInput {
  id: ID
  url: String!
  user: UserCreateOneWithoutFilesInput
}

input FileCreateWithoutUserInput {
  id: ID
  url: String!
  tweet: TweetCreateOneWithoutFilesInput
}

type FileEdge {
  node: File!
  cursor: String!
}

enum FileOrderByInput {
  id_ASC
  id_DESC
  url_ASC
  url_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type FilePreviousValues {
  id: ID!
  url: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input FileScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [FileScalarWhereInput!]
  OR: [FileScalarWhereInput!]
  NOT: [FileScalarWhereInput!]
}

type FileSubscriptionPayload {
  mutation: MutationType!
  node: File
  updatedFields: [String!]
  previousValues: FilePreviousValues
}

input FileSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: FileWhereInput
  AND: [FileSubscriptionWhereInput!]
  OR: [FileSubscriptionWhereInput!]
  NOT: [FileSubscriptionWhereInput!]
}

input FileUpdateInput {
  url: String
  tweet: TweetUpdateOneWithoutFilesInput
  user: UserUpdateOneWithoutFilesInput
}

input FileUpdateManyDataInput {
  url: String
}

input FileUpdateManyMutationInput {
  url: String
}

input FileUpdateManyWithoutTweetInput {
  create: [FileCreateWithoutTweetInput!]
  delete: [FileWhereUniqueInput!]
  connect: [FileWhereUniqueInput!]
  set: [FileWhereUniqueInput!]
  disconnect: [FileWhereUniqueInput!]
  update: [FileUpdateWithWhereUniqueWithoutTweetInput!]
  upsert: [FileUpsertWithWhereUniqueWithoutTweetInput!]
  deleteMany: [FileScalarWhereInput!]
  updateMany: [FileUpdateManyWithWhereNestedInput!]
}

input FileUpdateManyWithoutUserInput {
  create: [FileCreateWithoutUserInput!]
  delete: [FileWhereUniqueInput!]
  connect: [FileWhereUniqueInput!]
  set: [FileWhereUniqueInput!]
  disconnect: [FileWhereUniqueInput!]
  update: [FileUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [FileUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [FileScalarWhereInput!]
  updateMany: [FileUpdateManyWithWhereNestedInput!]
}

input FileUpdateManyWithWhereNestedInput {
  where: FileScalarWhereInput!
  data: FileUpdateManyDataInput!
}

input FileUpdateWithoutTweetDataInput {
  url: String
  user: UserUpdateOneWithoutFilesInput
}

input FileUpdateWithoutUserDataInput {
  url: String
  tweet: TweetUpdateOneWithoutFilesInput
}

input FileUpdateWithWhereUniqueWithoutTweetInput {
  where: FileWhereUniqueInput!
  data: FileUpdateWithoutTweetDataInput!
}

input FileUpdateWithWhereUniqueWithoutUserInput {
  where: FileWhereUniqueInput!
  data: FileUpdateWithoutUserDataInput!
}

input FileUpsertWithWhereUniqueWithoutTweetInput {
  where: FileWhereUniqueInput!
  update: FileUpdateWithoutTweetDataInput!
  create: FileCreateWithoutTweetInput!
}

input FileUpsertWithWhereUniqueWithoutUserInput {
  where: FileWhereUniqueInput!
  update: FileUpdateWithoutUserDataInput!
  create: FileCreateWithoutUserInput!
}

input FileWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  tweet: TweetWhereInput
  user: UserWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [FileWhereInput!]
  OR: [FileWhereInput!]
  NOT: [FileWhereInput!]
}

input FileWhereUniqueInput {
  id: ID
}

type Like {
  id: ID!
  tweet: Tweet
  user: User
  createdAt: DateTime!
  updatedAt: DateTime!
}

type LikeConnection {
  pageInfo: PageInfo!
  edges: [LikeEdge]!
  aggregate: AggregateLike!
}

input LikeCreateInput {
  id: ID
  tweet: TweetCreateOneWithoutLikesInput
  user: UserCreateOneWithoutLikesInput
}

input LikeCreateManyWithoutTweetInput {
  create: [LikeCreateWithoutTweetInput!]
  connect: [LikeWhereUniqueInput!]
}

input LikeCreateManyWithoutUserInput {
  create: [LikeCreateWithoutUserInput!]
  connect: [LikeWhereUniqueInput!]
}

input LikeCreateWithoutTweetInput {
  id: ID
  user: UserCreateOneWithoutLikesInput
}

input LikeCreateWithoutUserInput {
  id: ID
  tweet: TweetCreateOneWithoutLikesInput
}

type LikeEdge {
  node: Like!
  cursor: String!
}

enum LikeOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type LikePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input LikeScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [LikeScalarWhereInput!]
  OR: [LikeScalarWhereInput!]
  NOT: [LikeScalarWhereInput!]
}

type LikeSubscriptionPayload {
  mutation: MutationType!
  node: Like
  updatedFields: [String!]
  previousValues: LikePreviousValues
}

input LikeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LikeWhereInput
  AND: [LikeSubscriptionWhereInput!]
  OR: [LikeSubscriptionWhereInput!]
  NOT: [LikeSubscriptionWhereInput!]
}

input LikeUpdateInput {
  tweet: TweetUpdateOneWithoutLikesInput
  user: UserUpdateOneWithoutLikesInput
}

input LikeUpdateManyWithoutTweetInput {
  create: [LikeCreateWithoutTweetInput!]
  delete: [LikeWhereUniqueInput!]
  connect: [LikeWhereUniqueInput!]
  set: [LikeWhereUniqueInput!]
  disconnect: [LikeWhereUniqueInput!]
  update: [LikeUpdateWithWhereUniqueWithoutTweetInput!]
  upsert: [LikeUpsertWithWhereUniqueWithoutTweetInput!]
  deleteMany: [LikeScalarWhereInput!]
}

input LikeUpdateManyWithoutUserInput {
  create: [LikeCreateWithoutUserInput!]
  delete: [LikeWhereUniqueInput!]
  connect: [LikeWhereUniqueInput!]
  set: [LikeWhereUniqueInput!]
  disconnect: [LikeWhereUniqueInput!]
  update: [LikeUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [LikeUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [LikeScalarWhereInput!]
}

input LikeUpdateWithoutTweetDataInput {
  user: UserUpdateOneWithoutLikesInput
}

input LikeUpdateWithoutUserDataInput {
  tweet: TweetUpdateOneWithoutLikesInput
}

input LikeUpdateWithWhereUniqueWithoutTweetInput {
  where: LikeWhereUniqueInput!
  data: LikeUpdateWithoutTweetDataInput!
}

input LikeUpdateWithWhereUniqueWithoutUserInput {
  where: LikeWhereUniqueInput!
  data: LikeUpdateWithoutUserDataInput!
}

input LikeUpsertWithWhereUniqueWithoutTweetInput {
  where: LikeWhereUniqueInput!
  update: LikeUpdateWithoutTweetDataInput!
  create: LikeCreateWithoutTweetInput!
}

input LikeUpsertWithWhereUniqueWithoutUserInput {
  where: LikeWhereUniqueInput!
  update: LikeUpdateWithoutUserDataInput!
  create: LikeCreateWithoutUserInput!
}

input LikeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  tweet: TweetWhereInput
  user: UserWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [LikeWhereInput!]
  OR: [LikeWhereInput!]
  NOT: [LikeWhereInput!]
}

input LikeWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createComment(data: CommentCreateInput!): Comment!
  updateComment(data: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment
  updateManyComments(data: CommentUpdateManyMutationInput!, where: CommentWhereInput): BatchPayload!
  upsertComment(where: CommentWhereUniqueInput!, create: CommentCreateInput!, update: CommentUpdateInput!): Comment!
  deleteComment(where: CommentWhereUniqueInput!): Comment
  deleteManyComments(where: CommentWhereInput): BatchPayload!
  createFile(data: FileCreateInput!): File!
  updateFile(data: FileUpdateInput!, where: FileWhereUniqueInput!): File
  updateManyFiles(data: FileUpdateManyMutationInput!, where: FileWhereInput): BatchPayload!
  upsertFile(where: FileWhereUniqueInput!, create: FileCreateInput!, update: FileUpdateInput!): File!
  deleteFile(where: FileWhereUniqueInput!): File
  deleteManyFiles(where: FileWhereInput): BatchPayload!
  createLike(data: LikeCreateInput!): Like!
  updateLike(data: LikeUpdateInput!, where: LikeWhereUniqueInput!): Like
  upsertLike(where: LikeWhereUniqueInput!, create: LikeCreateInput!, update: LikeUpdateInput!): Like!
  deleteLike(where: LikeWhereUniqueInput!): Like
  deleteManyLikes(where: LikeWhereInput): BatchPayload!
  createRetweet(data: RetweetCreateInput!): Retweet!
  updateRetweet(data: RetweetUpdateInput!, where: RetweetWhereUniqueInput!): Retweet
  upsertRetweet(where: RetweetWhereUniqueInput!, create: RetweetCreateInput!, update: RetweetUpdateInput!): Retweet!
  deleteRetweet(where: RetweetWhereUniqueInput!): Retweet
  deleteManyRetweets(where: RetweetWhereInput): BatchPayload!
  createTag(data: TagCreateInput!): Tag!
  updateTag(data: TagUpdateInput!, where: TagWhereUniqueInput!): Tag
  updateManyTags(data: TagUpdateManyMutationInput!, where: TagWhereInput): BatchPayload!
  upsertTag(where: TagWhereUniqueInput!, create: TagCreateInput!, update: TagUpdateInput!): Tag!
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteManyTags(where: TagWhereInput): BatchPayload!
  createTweet(data: TweetCreateInput!): Tweet!
  updateTweet(data: TweetUpdateInput!, where: TweetWhereUniqueInput!): Tweet
  updateManyTweets(data: TweetUpdateManyMutationInput!, where: TweetWhereInput): BatchPayload!
  upsertTweet(where: TweetWhereUniqueInput!, create: TweetCreateInput!, update: TweetUpdateInput!): Tweet!
  deleteTweet(where: TweetWhereUniqueInput!): Tweet
  deleteManyTweets(where: TweetWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  comment(where: CommentWhereUniqueInput!): Comment
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment]!
  commentsConnection(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CommentConnection!
  file(where: FileWhereUniqueInput!): File
  files(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [File]!
  filesConnection(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FileConnection!
  like(where: LikeWhereUniqueInput!): Like
  likes(where: LikeWhereInput, orderBy: LikeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Like]!
  likesConnection(where: LikeWhereInput, orderBy: LikeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LikeConnection!
  retweet(where: RetweetWhereUniqueInput!): Retweet
  retweets(where: RetweetWhereInput, orderBy: RetweetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Retweet]!
  retweetsConnection(where: RetweetWhereInput, orderBy: RetweetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RetweetConnection!
  tag(where: TagWhereUniqueInput!): Tag
  tags(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tag]!
  tagsConnection(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TagConnection!
  tweet(where: TweetWhereUniqueInput!): Tweet
  tweets(where: TweetWhereInput, orderBy: TweetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tweet]!
  tweetsConnection(where: TweetWhereInput, orderBy: TweetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TweetConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Retweet {
  id: ID!
  tweet: Tweet
  user: User
  createdAt: DateTime!
  updatedAt: DateTime!
}

type RetweetConnection {
  pageInfo: PageInfo!
  edges: [RetweetEdge]!
  aggregate: AggregateRetweet!
}

input RetweetCreateInput {
  id: ID
  tweet: TweetCreateOneWithoutRetweetsInput
  user: UserCreateOneWithoutRetweetsInput
}

input RetweetCreateManyWithoutTweetInput {
  create: [RetweetCreateWithoutTweetInput!]
  connect: [RetweetWhereUniqueInput!]
}

input RetweetCreateManyWithoutUserInput {
  create: [RetweetCreateWithoutUserInput!]
  connect: [RetweetWhereUniqueInput!]
}

input RetweetCreateWithoutTweetInput {
  id: ID
  user: UserCreateOneWithoutRetweetsInput
}

input RetweetCreateWithoutUserInput {
  id: ID
  tweet: TweetCreateOneWithoutRetweetsInput
}

type RetweetEdge {
  node: Retweet!
  cursor: String!
}

enum RetweetOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type RetweetPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input RetweetScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [RetweetScalarWhereInput!]
  OR: [RetweetScalarWhereInput!]
  NOT: [RetweetScalarWhereInput!]
}

type RetweetSubscriptionPayload {
  mutation: MutationType!
  node: Retweet
  updatedFields: [String!]
  previousValues: RetweetPreviousValues
}

input RetweetSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: RetweetWhereInput
  AND: [RetweetSubscriptionWhereInput!]
  OR: [RetweetSubscriptionWhereInput!]
  NOT: [RetweetSubscriptionWhereInput!]
}

input RetweetUpdateInput {
  tweet: TweetUpdateOneWithoutRetweetsInput
  user: UserUpdateOneWithoutRetweetsInput
}

input RetweetUpdateManyWithoutTweetInput {
  create: [RetweetCreateWithoutTweetInput!]
  delete: [RetweetWhereUniqueInput!]
  connect: [RetweetWhereUniqueInput!]
  set: [RetweetWhereUniqueInput!]
  disconnect: [RetweetWhereUniqueInput!]
  update: [RetweetUpdateWithWhereUniqueWithoutTweetInput!]
  upsert: [RetweetUpsertWithWhereUniqueWithoutTweetInput!]
  deleteMany: [RetweetScalarWhereInput!]
}

input RetweetUpdateManyWithoutUserInput {
  create: [RetweetCreateWithoutUserInput!]
  delete: [RetweetWhereUniqueInput!]
  connect: [RetweetWhereUniqueInput!]
  set: [RetweetWhereUniqueInput!]
  disconnect: [RetweetWhereUniqueInput!]
  update: [RetweetUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [RetweetUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [RetweetScalarWhereInput!]
}

input RetweetUpdateWithoutTweetDataInput {
  user: UserUpdateOneWithoutRetweetsInput
}

input RetweetUpdateWithoutUserDataInput {
  tweet: TweetUpdateOneWithoutRetweetsInput
}

input RetweetUpdateWithWhereUniqueWithoutTweetInput {
  where: RetweetWhereUniqueInput!
  data: RetweetUpdateWithoutTweetDataInput!
}

input RetweetUpdateWithWhereUniqueWithoutUserInput {
  where: RetweetWhereUniqueInput!
  data: RetweetUpdateWithoutUserDataInput!
}

input RetweetUpsertWithWhereUniqueWithoutTweetInput {
  where: RetweetWhereUniqueInput!
  update: RetweetUpdateWithoutTweetDataInput!
  create: RetweetCreateWithoutTweetInput!
}

input RetweetUpsertWithWhereUniqueWithoutUserInput {
  where: RetweetWhereUniqueInput!
  update: RetweetUpdateWithoutUserDataInput!
  create: RetweetCreateWithoutUserInput!
}

input RetweetWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  tweet: TweetWhereInput
  user: UserWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [RetweetWhereInput!]
  OR: [RetweetWhereInput!]
  NOT: [RetweetWhereInput!]
}

input RetweetWhereUniqueInput {
  id: ID
}

type Subscription {
  comment(where: CommentSubscriptionWhereInput): CommentSubscriptionPayload
  file(where: FileSubscriptionWhereInput): FileSubscriptionPayload
  like(where: LikeSubscriptionWhereInput): LikeSubscriptionPayload
  retweet(where: RetweetSubscriptionWhereInput): RetweetSubscriptionPayload
  tag(where: TagSubscriptionWhereInput): TagSubscriptionPayload
  tweet(where: TweetSubscriptionWhereInput): TweetSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type Tag {
  id: ID!
  text: String!
  tweets(where: TweetWhereInput, orderBy: TweetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tweet!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type TagConnection {
  pageInfo: PageInfo!
  edges: [TagEdge]!
  aggregate: AggregateTag!
}

input TagCreateInput {
  id: ID
  text: String!
  tweets: TweetCreateManyInput
}

type TagEdge {
  node: Tag!
  cursor: String!
}

enum TagOrderByInput {
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type TagPreviousValues {
  id: ID!
  text: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type TagSubscriptionPayload {
  mutation: MutationType!
  node: Tag
  updatedFields: [String!]
  previousValues: TagPreviousValues
}

input TagSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TagWhereInput
  AND: [TagSubscriptionWhereInput!]
  OR: [TagSubscriptionWhereInput!]
  NOT: [TagSubscriptionWhereInput!]
}

input TagUpdateInput {
  text: String
  tweets: TweetUpdateManyInput
}

input TagUpdateManyMutationInput {
  text: String
}

input TagWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  tweets_every: TweetWhereInput
  tweets_some: TweetWhereInput
  tweets_none: TweetWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
}

input TagWhereUniqueInput {
  id: ID
}

type Tweet {
  id: ID!
  user: User
  text: String!
  tags: [String!]!
  files(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [File!]
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
  likes(where: LikeWhereInput, orderBy: LikeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Like!]
  retweets(where: RetweetWhereInput, orderBy: RetweetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Retweet!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type TweetConnection {
  pageInfo: PageInfo!
  edges: [TweetEdge]!
  aggregate: AggregateTweet!
}

input TweetCreateInput {
  id: ID
  user: UserCreateOneWithoutTweetsInput
  text: String!
  tags: TweetCreatetagsInput
  files: FileCreateManyWithoutTweetInput
  comments: CommentCreateManyWithoutTweetInput
  likes: LikeCreateManyWithoutTweetInput
  retweets: RetweetCreateManyWithoutTweetInput
}

input TweetCreateManyInput {
  create: [TweetCreateInput!]
  connect: [TweetWhereUniqueInput!]
}

input TweetCreateManyWithoutUserInput {
  create: [TweetCreateWithoutUserInput!]
  connect: [TweetWhereUniqueInput!]
}

input TweetCreateOneWithoutCommentsInput {
  create: TweetCreateWithoutCommentsInput
  connect: TweetWhereUniqueInput
}

input TweetCreateOneWithoutFilesInput {
  create: TweetCreateWithoutFilesInput
  connect: TweetWhereUniqueInput
}

input TweetCreateOneWithoutLikesInput {
  create: TweetCreateWithoutLikesInput
  connect: TweetWhereUniqueInput
}

input TweetCreateOneWithoutRetweetsInput {
  create: TweetCreateWithoutRetweetsInput
  connect: TweetWhereUniqueInput
}

input TweetCreatetagsInput {
  set: [String!]
}

input TweetCreateWithoutCommentsInput {
  id: ID
  user: UserCreateOneWithoutTweetsInput
  text: String!
  tags: TweetCreatetagsInput
  files: FileCreateManyWithoutTweetInput
  likes: LikeCreateManyWithoutTweetInput
  retweets: RetweetCreateManyWithoutTweetInput
}

input TweetCreateWithoutFilesInput {
  id: ID
  user: UserCreateOneWithoutTweetsInput
  text: String!
  tags: TweetCreatetagsInput
  comments: CommentCreateManyWithoutTweetInput
  likes: LikeCreateManyWithoutTweetInput
  retweets: RetweetCreateManyWithoutTweetInput
}

input TweetCreateWithoutLikesInput {
  id: ID
  user: UserCreateOneWithoutTweetsInput
  text: String!
  tags: TweetCreatetagsInput
  files: FileCreateManyWithoutTweetInput
  comments: CommentCreateManyWithoutTweetInput
  retweets: RetweetCreateManyWithoutTweetInput
}

input TweetCreateWithoutRetweetsInput {
  id: ID
  user: UserCreateOneWithoutTweetsInput
  text: String!
  tags: TweetCreatetagsInput
  files: FileCreateManyWithoutTweetInput
  comments: CommentCreateManyWithoutTweetInput
  likes: LikeCreateManyWithoutTweetInput
}

input TweetCreateWithoutUserInput {
  id: ID
  text: String!
  tags: TweetCreatetagsInput
  files: FileCreateManyWithoutTweetInput
  comments: CommentCreateManyWithoutTweetInput
  likes: LikeCreateManyWithoutTweetInput
  retweets: RetweetCreateManyWithoutTweetInput
}

type TweetEdge {
  node: Tweet!
  cursor: String!
}

enum TweetOrderByInput {
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type TweetPreviousValues {
  id: ID!
  text: String!
  tags: [String!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input TweetScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [TweetScalarWhereInput!]
  OR: [TweetScalarWhereInput!]
  NOT: [TweetScalarWhereInput!]
}

type TweetSubscriptionPayload {
  mutation: MutationType!
  node: Tweet
  updatedFields: [String!]
  previousValues: TweetPreviousValues
}

input TweetSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TweetWhereInput
  AND: [TweetSubscriptionWhereInput!]
  OR: [TweetSubscriptionWhereInput!]
  NOT: [TweetSubscriptionWhereInput!]
}

input TweetUpdateDataInput {
  user: UserUpdateOneWithoutTweetsInput
  text: String
  tags: TweetUpdatetagsInput
  files: FileUpdateManyWithoutTweetInput
  comments: CommentUpdateManyWithoutTweetInput
  likes: LikeUpdateManyWithoutTweetInput
  retweets: RetweetUpdateManyWithoutTweetInput
}

input TweetUpdateInput {
  user: UserUpdateOneWithoutTweetsInput
  text: String
  tags: TweetUpdatetagsInput
  files: FileUpdateManyWithoutTweetInput
  comments: CommentUpdateManyWithoutTweetInput
  likes: LikeUpdateManyWithoutTweetInput
  retweets: RetweetUpdateManyWithoutTweetInput
}

input TweetUpdateManyDataInput {
  text: String
  tags: TweetUpdatetagsInput
}

input TweetUpdateManyInput {
  create: [TweetCreateInput!]
  update: [TweetUpdateWithWhereUniqueNestedInput!]
  upsert: [TweetUpsertWithWhereUniqueNestedInput!]
  delete: [TweetWhereUniqueInput!]
  connect: [TweetWhereUniqueInput!]
  set: [TweetWhereUniqueInput!]
  disconnect: [TweetWhereUniqueInput!]
  deleteMany: [TweetScalarWhereInput!]
  updateMany: [TweetUpdateManyWithWhereNestedInput!]
}

input TweetUpdateManyMutationInput {
  text: String
  tags: TweetUpdatetagsInput
}

input TweetUpdateManyWithoutUserInput {
  create: [TweetCreateWithoutUserInput!]
  delete: [TweetWhereUniqueInput!]
  connect: [TweetWhereUniqueInput!]
  set: [TweetWhereUniqueInput!]
  disconnect: [TweetWhereUniqueInput!]
  update: [TweetUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [TweetUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [TweetScalarWhereInput!]
  updateMany: [TweetUpdateManyWithWhereNestedInput!]
}

input TweetUpdateManyWithWhereNestedInput {
  where: TweetScalarWhereInput!
  data: TweetUpdateManyDataInput!
}

input TweetUpdateOneWithoutCommentsInput {
  create: TweetCreateWithoutCommentsInput
  update: TweetUpdateWithoutCommentsDataInput
  upsert: TweetUpsertWithoutCommentsInput
  delete: Boolean
  disconnect: Boolean
  connect: TweetWhereUniqueInput
}

input TweetUpdateOneWithoutFilesInput {
  create: TweetCreateWithoutFilesInput
  update: TweetUpdateWithoutFilesDataInput
  upsert: TweetUpsertWithoutFilesInput
  delete: Boolean
  disconnect: Boolean
  connect: TweetWhereUniqueInput
}

input TweetUpdateOneWithoutLikesInput {
  create: TweetCreateWithoutLikesInput
  update: TweetUpdateWithoutLikesDataInput
  upsert: TweetUpsertWithoutLikesInput
  delete: Boolean
  disconnect: Boolean
  connect: TweetWhereUniqueInput
}

input TweetUpdateOneWithoutRetweetsInput {
  create: TweetCreateWithoutRetweetsInput
  update: TweetUpdateWithoutRetweetsDataInput
  upsert: TweetUpsertWithoutRetweetsInput
  delete: Boolean
  disconnect: Boolean
  connect: TweetWhereUniqueInput
}

input TweetUpdatetagsInput {
  set: [String!]
}

input TweetUpdateWithoutCommentsDataInput {
  user: UserUpdateOneWithoutTweetsInput
  text: String
  tags: TweetUpdatetagsInput
  files: FileUpdateManyWithoutTweetInput
  likes: LikeUpdateManyWithoutTweetInput
  retweets: RetweetUpdateManyWithoutTweetInput
}

input TweetUpdateWithoutFilesDataInput {
  user: UserUpdateOneWithoutTweetsInput
  text: String
  tags: TweetUpdatetagsInput
  comments: CommentUpdateManyWithoutTweetInput
  likes: LikeUpdateManyWithoutTweetInput
  retweets: RetweetUpdateManyWithoutTweetInput
}

input TweetUpdateWithoutLikesDataInput {
  user: UserUpdateOneWithoutTweetsInput
  text: String
  tags: TweetUpdatetagsInput
  files: FileUpdateManyWithoutTweetInput
  comments: CommentUpdateManyWithoutTweetInput
  retweets: RetweetUpdateManyWithoutTweetInput
}

input TweetUpdateWithoutRetweetsDataInput {
  user: UserUpdateOneWithoutTweetsInput
  text: String
  tags: TweetUpdatetagsInput
  files: FileUpdateManyWithoutTweetInput
  comments: CommentUpdateManyWithoutTweetInput
  likes: LikeUpdateManyWithoutTweetInput
}

input TweetUpdateWithoutUserDataInput {
  text: String
  tags: TweetUpdatetagsInput
  files: FileUpdateManyWithoutTweetInput
  comments: CommentUpdateManyWithoutTweetInput
  likes: LikeUpdateManyWithoutTweetInput
  retweets: RetweetUpdateManyWithoutTweetInput
}

input TweetUpdateWithWhereUniqueNestedInput {
  where: TweetWhereUniqueInput!
  data: TweetUpdateDataInput!
}

input TweetUpdateWithWhereUniqueWithoutUserInput {
  where: TweetWhereUniqueInput!
  data: TweetUpdateWithoutUserDataInput!
}

input TweetUpsertWithoutCommentsInput {
  update: TweetUpdateWithoutCommentsDataInput!
  create: TweetCreateWithoutCommentsInput!
}

input TweetUpsertWithoutFilesInput {
  update: TweetUpdateWithoutFilesDataInput!
  create: TweetCreateWithoutFilesInput!
}

input TweetUpsertWithoutLikesInput {
  update: TweetUpdateWithoutLikesDataInput!
  create: TweetCreateWithoutLikesInput!
}

input TweetUpsertWithoutRetweetsInput {
  update: TweetUpdateWithoutRetweetsDataInput!
  create: TweetCreateWithoutRetweetsInput!
}

input TweetUpsertWithWhereUniqueNestedInput {
  where: TweetWhereUniqueInput!
  update: TweetUpdateDataInput!
  create: TweetCreateInput!
}

input TweetUpsertWithWhereUniqueWithoutUserInput {
  where: TweetWhereUniqueInput!
  update: TweetUpdateWithoutUserDataInput!
  create: TweetCreateWithoutUserInput!
}

input TweetWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  files_every: FileWhereInput
  files_some: FileWhereInput
  files_none: FileWhereInput
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
  likes_every: LikeWhereInput
  likes_some: LikeWhereInput
  likes_none: LikeWhereInput
  retweets_every: RetweetWhereInput
  retweets_some: RetweetWhereInput
  retweets_none: RetweetWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [TweetWhereInput!]
  OR: [TweetWhereInput!]
  NOT: [TweetWhereInput!]
}

input TweetWhereUniqueInput {
  id: ID
}

type User {
  id: ID!
  firstname: String!
  lastname: String!
  email: String!
  handle: String!
  password: String
  coverPhoto: String
  avatar: String
  bio: String
  location: String
  website: String
  dob: String
  tweets(where: TweetWhereInput, orderBy: TweetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tweet!]
  retweets(where: RetweetWhereInput, orderBy: RetweetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Retweet!]
  following(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  followers(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
  likes(where: LikeWhereInput, orderBy: LikeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Like!]
  files(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [File!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  firstname: String!
  lastname: String!
  email: String!
  handle: String!
  password: String
  coverPhoto: String
  avatar: String
  bio: String
  location: String
  website: String
  dob: String
  tweets: TweetCreateManyWithoutUserInput
  retweets: RetweetCreateManyWithoutUserInput
  following: UserCreateManyWithoutFollowersInput
  followers: UserCreateManyWithoutFollowingInput
  comments: CommentCreateManyWithoutUserInput
  likes: LikeCreateManyWithoutUserInput
  files: FileCreateManyWithoutUserInput
}

input UserCreateManyWithoutFollowersInput {
  create: [UserCreateWithoutFollowersInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutFollowingInput {
  create: [UserCreateWithoutFollowingInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutFilesInput {
  create: UserCreateWithoutFilesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutLikesInput {
  create: UserCreateWithoutLikesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutRetweetsInput {
  create: UserCreateWithoutRetweetsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutTweetsInput {
  create: UserCreateWithoutTweetsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutCommentsInput {
  id: ID
  firstname: String!
  lastname: String!
  email: String!
  handle: String!
  password: String
  coverPhoto: String
  avatar: String
  bio: String
  location: String
  website: String
  dob: String
  tweets: TweetCreateManyWithoutUserInput
  retweets: RetweetCreateManyWithoutUserInput
  following: UserCreateManyWithoutFollowersInput
  followers: UserCreateManyWithoutFollowingInput
  likes: LikeCreateManyWithoutUserInput
  files: FileCreateManyWithoutUserInput
}

input UserCreateWithoutFilesInput {
  id: ID
  firstname: String!
  lastname: String!
  email: String!
  handle: String!
  password: String
  coverPhoto: String
  avatar: String
  bio: String
  location: String
  website: String
  dob: String
  tweets: TweetCreateManyWithoutUserInput
  retweets: RetweetCreateManyWithoutUserInput
  following: UserCreateManyWithoutFollowersInput
  followers: UserCreateManyWithoutFollowingInput
  comments: CommentCreateManyWithoutUserInput
  likes: LikeCreateManyWithoutUserInput
}

input UserCreateWithoutFollowersInput {
  id: ID
  firstname: String!
  lastname: String!
  email: String!
  handle: String!
  password: String
  coverPhoto: String
  avatar: String
  bio: String
  location: String
  website: String
  dob: String
  tweets: TweetCreateManyWithoutUserInput
  retweets: RetweetCreateManyWithoutUserInput
  following: UserCreateManyWithoutFollowersInput
  comments: CommentCreateManyWithoutUserInput
  likes: LikeCreateManyWithoutUserInput
  files: FileCreateManyWithoutUserInput
}

input UserCreateWithoutFollowingInput {
  id: ID
  firstname: String!
  lastname: String!
  email: String!
  handle: String!
  password: String
  coverPhoto: String
  avatar: String
  bio: String
  location: String
  website: String
  dob: String
  tweets: TweetCreateManyWithoutUserInput
  retweets: RetweetCreateManyWithoutUserInput
  followers: UserCreateManyWithoutFollowingInput
  comments: CommentCreateManyWithoutUserInput
  likes: LikeCreateManyWithoutUserInput
  files: FileCreateManyWithoutUserInput
}

input UserCreateWithoutLikesInput {
  id: ID
  firstname: String!
  lastname: String!
  email: String!
  handle: String!
  password: String
  coverPhoto: String
  avatar: String
  bio: String
  location: String
  website: String
  dob: String
  tweets: TweetCreateManyWithoutUserInput
  retweets: RetweetCreateManyWithoutUserInput
  following: UserCreateManyWithoutFollowersInput
  followers: UserCreateManyWithoutFollowingInput
  comments: CommentCreateManyWithoutUserInput
  files: FileCreateManyWithoutUserInput
}

input UserCreateWithoutRetweetsInput {
  id: ID
  firstname: String!
  lastname: String!
  email: String!
  handle: String!
  password: String
  coverPhoto: String
  avatar: String
  bio: String
  location: String
  website: String
  dob: String
  tweets: TweetCreateManyWithoutUserInput
  following: UserCreateManyWithoutFollowersInput
  followers: UserCreateManyWithoutFollowingInput
  comments: CommentCreateManyWithoutUserInput
  likes: LikeCreateManyWithoutUserInput
  files: FileCreateManyWithoutUserInput
}

input UserCreateWithoutTweetsInput {
  id: ID
  firstname: String!
  lastname: String!
  email: String!
  handle: String!
  password: String
  coverPhoto: String
  avatar: String
  bio: String
  location: String
  website: String
  dob: String
  retweets: RetweetCreateManyWithoutUserInput
  following: UserCreateManyWithoutFollowersInput
  followers: UserCreateManyWithoutFollowingInput
  comments: CommentCreateManyWithoutUserInput
  likes: LikeCreateManyWithoutUserInput
  files: FileCreateManyWithoutUserInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  firstname_ASC
  firstname_DESC
  lastname_ASC
  lastname_DESC
  email_ASC
  email_DESC
  handle_ASC
  handle_DESC
  password_ASC
  password_DESC
  coverPhoto_ASC
  coverPhoto_DESC
  avatar_ASC
  avatar_DESC
  bio_ASC
  bio_DESC
  location_ASC
  location_DESC
  website_ASC
  website_DESC
  dob_ASC
  dob_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  firstname: String!
  lastname: String!
  email: String!
  handle: String!
  password: String
  coverPhoto: String
  avatar: String
  bio: String
  location: String
  website: String
  dob: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  firstname: String
  firstname_not: String
  firstname_in: [String!]
  firstname_not_in: [String!]
  firstname_lt: String
  firstname_lte: String
  firstname_gt: String
  firstname_gte: String
  firstname_contains: String
  firstname_not_contains: String
  firstname_starts_with: String
  firstname_not_starts_with: String
  firstname_ends_with: String
  firstname_not_ends_with: String
  lastname: String
  lastname_not: String
  lastname_in: [String!]
  lastname_not_in: [String!]
  lastname_lt: String
  lastname_lte: String
  lastname_gt: String
  lastname_gte: String
  lastname_contains: String
  lastname_not_contains: String
  lastname_starts_with: String
  lastname_not_starts_with: String
  lastname_ends_with: String
  lastname_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  handle: String
  handle_not: String
  handle_in: [String!]
  handle_not_in: [String!]
  handle_lt: String
  handle_lte: String
  handle_gt: String
  handle_gte: String
  handle_contains: String
  handle_not_contains: String
  handle_starts_with: String
  handle_not_starts_with: String
  handle_ends_with: String
  handle_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  coverPhoto: String
  coverPhoto_not: String
  coverPhoto_in: [String!]
  coverPhoto_not_in: [String!]
  coverPhoto_lt: String
  coverPhoto_lte: String
  coverPhoto_gt: String
  coverPhoto_gte: String
  coverPhoto_contains: String
  coverPhoto_not_contains: String
  coverPhoto_starts_with: String
  coverPhoto_not_starts_with: String
  coverPhoto_ends_with: String
  coverPhoto_not_ends_with: String
  avatar: String
  avatar_not: String
  avatar_in: [String!]
  avatar_not_in: [String!]
  avatar_lt: String
  avatar_lte: String
  avatar_gt: String
  avatar_gte: String
  avatar_contains: String
  avatar_not_contains: String
  avatar_starts_with: String
  avatar_not_starts_with: String
  avatar_ends_with: String
  avatar_not_ends_with: String
  bio: String
  bio_not: String
  bio_in: [String!]
  bio_not_in: [String!]
  bio_lt: String
  bio_lte: String
  bio_gt: String
  bio_gte: String
  bio_contains: String
  bio_not_contains: String
  bio_starts_with: String
  bio_not_starts_with: String
  bio_ends_with: String
  bio_not_ends_with: String
  location: String
  location_not: String
  location_in: [String!]
  location_not_in: [String!]
  location_lt: String
  location_lte: String
  location_gt: String
  location_gte: String
  location_contains: String
  location_not_contains: String
  location_starts_with: String
  location_not_starts_with: String
  location_ends_with: String
  location_not_ends_with: String
  website: String
  website_not: String
  website_in: [String!]
  website_not_in: [String!]
  website_lt: String
  website_lte: String
  website_gt: String
  website_gte: String
  website_contains: String
  website_not_contains: String
  website_starts_with: String
  website_not_starts_with: String
  website_ends_with: String
  website_not_ends_with: String
  dob: String
  dob_not: String
  dob_in: [String!]
  dob_not_in: [String!]
  dob_lt: String
  dob_lte: String
  dob_gt: String
  dob_gte: String
  dob_contains: String
  dob_not_contains: String
  dob_starts_with: String
  dob_not_starts_with: String
  dob_ends_with: String
  dob_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  firstname: String
  lastname: String
  email: String
  handle: String
  password: String
  coverPhoto: String
  avatar: String
  bio: String
  location: String
  website: String
  dob: String
  tweets: TweetUpdateManyWithoutUserInput
  retweets: RetweetUpdateManyWithoutUserInput
  following: UserUpdateManyWithoutFollowersInput
  followers: UserUpdateManyWithoutFollowingInput
  comments: CommentUpdateManyWithoutUserInput
  likes: LikeUpdateManyWithoutUserInput
  files: FileUpdateManyWithoutUserInput
}

input UserUpdateManyDataInput {
  firstname: String
  lastname: String
  email: String
  handle: String
  password: String
  coverPhoto: String
  avatar: String
  bio: String
  location: String
  website: String
  dob: String
}

input UserUpdateManyMutationInput {
  firstname: String
  lastname: String
  email: String
  handle: String
  password: String
  coverPhoto: String
  avatar: String
  bio: String
  location: String
  website: String
  dob: String
}

input UserUpdateManyWithoutFollowersInput {
  create: [UserCreateWithoutFollowersInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutFollowersInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutFollowersInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithoutFollowingInput {
  create: [UserCreateWithoutFollowingInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutFollowingInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutFollowingInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput
  update: UserUpdateWithoutCommentsDataInput
  upsert: UserUpsertWithoutCommentsInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutFilesInput {
  create: UserCreateWithoutFilesInput
  update: UserUpdateWithoutFilesDataInput
  upsert: UserUpsertWithoutFilesInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutLikesInput {
  create: UserCreateWithoutLikesInput
  update: UserUpdateWithoutLikesDataInput
  upsert: UserUpsertWithoutLikesInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutRetweetsInput {
  create: UserCreateWithoutRetweetsInput
  update: UserUpdateWithoutRetweetsDataInput
  upsert: UserUpsertWithoutRetweetsInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutTweetsInput {
  create: UserCreateWithoutTweetsInput
  update: UserUpdateWithoutTweetsDataInput
  upsert: UserUpsertWithoutTweetsInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutCommentsDataInput {
  firstname: String
  lastname: String
  email: String
  handle: String
  password: String
  coverPhoto: String
  avatar: String
  bio: String
  location: String
  website: String
  dob: String
  tweets: TweetUpdateManyWithoutUserInput
  retweets: RetweetUpdateManyWithoutUserInput
  following: UserUpdateManyWithoutFollowersInput
  followers: UserUpdateManyWithoutFollowingInput
  likes: LikeUpdateManyWithoutUserInput
  files: FileUpdateManyWithoutUserInput
}

input UserUpdateWithoutFilesDataInput {
  firstname: String
  lastname: String
  email: String
  handle: String
  password: String
  coverPhoto: String
  avatar: String
  bio: String
  location: String
  website: String
  dob: String
  tweets: TweetUpdateManyWithoutUserInput
  retweets: RetweetUpdateManyWithoutUserInput
  following: UserUpdateManyWithoutFollowersInput
  followers: UserUpdateManyWithoutFollowingInput
  comments: CommentUpdateManyWithoutUserInput
  likes: LikeUpdateManyWithoutUserInput
}

input UserUpdateWithoutFollowersDataInput {
  firstname: String
  lastname: String
  email: String
  handle: String
  password: String
  coverPhoto: String
  avatar: String
  bio: String
  location: String
  website: String
  dob: String
  tweets: TweetUpdateManyWithoutUserInput
  retweets: RetweetUpdateManyWithoutUserInput
  following: UserUpdateManyWithoutFollowersInput
  comments: CommentUpdateManyWithoutUserInput
  likes: LikeUpdateManyWithoutUserInput
  files: FileUpdateManyWithoutUserInput
}

input UserUpdateWithoutFollowingDataInput {
  firstname: String
  lastname: String
  email: String
  handle: String
  password: String
  coverPhoto: String
  avatar: String
  bio: String
  location: String
  website: String
  dob: String
  tweets: TweetUpdateManyWithoutUserInput
  retweets: RetweetUpdateManyWithoutUserInput
  followers: UserUpdateManyWithoutFollowingInput
  comments: CommentUpdateManyWithoutUserInput
  likes: LikeUpdateManyWithoutUserInput
  files: FileUpdateManyWithoutUserInput
}

input UserUpdateWithoutLikesDataInput {
  firstname: String
  lastname: String
  email: String
  handle: String
  password: String
  coverPhoto: String
  avatar: String
  bio: String
  location: String
  website: String
  dob: String
  tweets: TweetUpdateManyWithoutUserInput
  retweets: RetweetUpdateManyWithoutUserInput
  following: UserUpdateManyWithoutFollowersInput
  followers: UserUpdateManyWithoutFollowingInput
  comments: CommentUpdateManyWithoutUserInput
  files: FileUpdateManyWithoutUserInput
}

input UserUpdateWithoutRetweetsDataInput {
  firstname: String
  lastname: String
  email: String
  handle: String
  password: String
  coverPhoto: String
  avatar: String
  bio: String
  location: String
  website: String
  dob: String
  tweets: TweetUpdateManyWithoutUserInput
  following: UserUpdateManyWithoutFollowersInput
  followers: UserUpdateManyWithoutFollowingInput
  comments: CommentUpdateManyWithoutUserInput
  likes: LikeUpdateManyWithoutUserInput
  files: FileUpdateManyWithoutUserInput
}

input UserUpdateWithoutTweetsDataInput {
  firstname: String
  lastname: String
  email: String
  handle: String
  password: String
  coverPhoto: String
  avatar: String
  bio: String
  location: String
  website: String
  dob: String
  retweets: RetweetUpdateManyWithoutUserInput
  following: UserUpdateManyWithoutFollowersInput
  followers: UserUpdateManyWithoutFollowingInput
  comments: CommentUpdateManyWithoutUserInput
  likes: LikeUpdateManyWithoutUserInput
  files: FileUpdateManyWithoutUserInput
}

input UserUpdateWithWhereUniqueWithoutFollowersInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutFollowersDataInput!
}

input UserUpdateWithWhereUniqueWithoutFollowingInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutFollowingDataInput!
}

input UserUpsertWithoutCommentsInput {
  update: UserUpdateWithoutCommentsDataInput!
  create: UserCreateWithoutCommentsInput!
}

input UserUpsertWithoutFilesInput {
  update: UserUpdateWithoutFilesDataInput!
  create: UserCreateWithoutFilesInput!
}

input UserUpsertWithoutLikesInput {
  update: UserUpdateWithoutLikesDataInput!
  create: UserCreateWithoutLikesInput!
}

input UserUpsertWithoutRetweetsInput {
  update: UserUpdateWithoutRetweetsDataInput!
  create: UserCreateWithoutRetweetsInput!
}

input UserUpsertWithoutTweetsInput {
  update: UserUpdateWithoutTweetsDataInput!
  create: UserCreateWithoutTweetsInput!
}

input UserUpsertWithWhereUniqueWithoutFollowersInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutFollowersDataInput!
  create: UserCreateWithoutFollowersInput!
}

input UserUpsertWithWhereUniqueWithoutFollowingInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutFollowingDataInput!
  create: UserCreateWithoutFollowingInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  firstname: String
  firstname_not: String
  firstname_in: [String!]
  firstname_not_in: [String!]
  firstname_lt: String
  firstname_lte: String
  firstname_gt: String
  firstname_gte: String
  firstname_contains: String
  firstname_not_contains: String
  firstname_starts_with: String
  firstname_not_starts_with: String
  firstname_ends_with: String
  firstname_not_ends_with: String
  lastname: String
  lastname_not: String
  lastname_in: [String!]
  lastname_not_in: [String!]
  lastname_lt: String
  lastname_lte: String
  lastname_gt: String
  lastname_gte: String
  lastname_contains: String
  lastname_not_contains: String
  lastname_starts_with: String
  lastname_not_starts_with: String
  lastname_ends_with: String
  lastname_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  handle: String
  handle_not: String
  handle_in: [String!]
  handle_not_in: [String!]
  handle_lt: String
  handle_lte: String
  handle_gt: String
  handle_gte: String
  handle_contains: String
  handle_not_contains: String
  handle_starts_with: String
  handle_not_starts_with: String
  handle_ends_with: String
  handle_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  coverPhoto: String
  coverPhoto_not: String
  coverPhoto_in: [String!]
  coverPhoto_not_in: [String!]
  coverPhoto_lt: String
  coverPhoto_lte: String
  coverPhoto_gt: String
  coverPhoto_gte: String
  coverPhoto_contains: String
  coverPhoto_not_contains: String
  coverPhoto_starts_with: String
  coverPhoto_not_starts_with: String
  coverPhoto_ends_with: String
  coverPhoto_not_ends_with: String
  avatar: String
  avatar_not: String
  avatar_in: [String!]
  avatar_not_in: [String!]
  avatar_lt: String
  avatar_lte: String
  avatar_gt: String
  avatar_gte: String
  avatar_contains: String
  avatar_not_contains: String
  avatar_starts_with: String
  avatar_not_starts_with: String
  avatar_ends_with: String
  avatar_not_ends_with: String
  bio: String
  bio_not: String
  bio_in: [String!]
  bio_not_in: [String!]
  bio_lt: String
  bio_lte: String
  bio_gt: String
  bio_gte: String
  bio_contains: String
  bio_not_contains: String
  bio_starts_with: String
  bio_not_starts_with: String
  bio_ends_with: String
  bio_not_ends_with: String
  location: String
  location_not: String
  location_in: [String!]
  location_not_in: [String!]
  location_lt: String
  location_lte: String
  location_gt: String
  location_gte: String
  location_contains: String
  location_not_contains: String
  location_starts_with: String
  location_not_starts_with: String
  location_ends_with: String
  location_not_ends_with: String
  website: String
  website_not: String
  website_in: [String!]
  website_not_in: [String!]
  website_lt: String
  website_lte: String
  website_gt: String
  website_gte: String
  website_contains: String
  website_not_contains: String
  website_starts_with: String
  website_not_starts_with: String
  website_ends_with: String
  website_not_ends_with: String
  dob: String
  dob_not: String
  dob_in: [String!]
  dob_not_in: [String!]
  dob_lt: String
  dob_lte: String
  dob_gt: String
  dob_gte: String
  dob_contains: String
  dob_not_contains: String
  dob_starts_with: String
  dob_not_starts_with: String
  dob_ends_with: String
  dob_not_ends_with: String
  tweets_every: TweetWhereInput
  tweets_some: TweetWhereInput
  tweets_none: TweetWhereInput
  retweets_every: RetweetWhereInput
  retweets_some: RetweetWhereInput
  retweets_none: RetweetWhereInput
  following_every: UserWhereInput
  following_some: UserWhereInput
  following_none: UserWhereInput
  followers_every: UserWhereInput
  followers_some: UserWhereInput
  followers_none: UserWhereInput
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
  likes_every: LikeWhereInput
  likes_some: LikeWhereInput
  likes_none: LikeWhereInput
  files_every: FileWhereInput
  files_some: FileWhereInput
  files_none: FileWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
  handle: String
}
